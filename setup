#!/bin/bash

WHOAMI=$(whoami)

print_status() {
	echo
	echo "## $1"
	echo
}

install_curl() {
	if [[ ! $(which -a curl) ]]
	then
		echo "Installing curl..."

		sudo apt install -y curl
	fi
}

PHP_VERSION='8.1'

increase_memory_limit_php() {
	sudo sed -i 's/memory_limit = 32M/memory_limit = 256M/' /etc/php/$PHP_VERSION/fpm/php.ini
}

increase_upload_limit_php() {
	sudo sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
	sudo sed -i 's/post_max_size = 8M/post_max_size = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
}

increase_time_limit_php() {
	sudo sed -i 's/max_execution_time = 30/max_execution_time = 300/' /etc/php/$PHP_VERSION/fpm/php.ini
	sudo sed -i 's/max_input_time = 60/max_input_time = 300/' /etc/php/$PHP_VERSION/fpm/php.ini
}

install_php() {
	if [[ ! $(which -a php) ]]
	then
		echo "Installing PHP..."

		sudo apt install -y php$PHP_VERSION-cli php$PHP_VERSION-common php$PHP_VERSION-curl php$PHP_VERSION-fpm php$PHP_VERSION-mysql php$PHP_VERSION-xml php$PHP_VERSION-gd php$PHP_VERSION-mbstring php$PHP_VERSION-imagick php$PHP_VERSION-ssh2 php$PHP_VERSION-zip php$PHP_VERSION-opcache php$PHP_VERSION-readline

		increase_memory_limit_php
		increase_upload_limit_php
		increase_time_limit_php
	fi
}

install_composer() {
	if [[ ! $(which -a composer) ]]
	then
		echo "Installing Composer..."
		/usr/bin/php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
		/usr/bin/php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
		/usr/bin/php composer-setup.php
		/usr/bin/php -r "unlink('composer-setup.php');"

		chmod +x composer.phar
		sudo mv composer.phar /usr/local/bin/composer
	fi
}

increase_upload_limit_nginx() {
	echo "http {
    client_max_body_size 100M;
}
sudo vi /etc/nginx/nginx.conf"
}

install_nginx() {
	if [[ ! $(which -a nginx) ]]
	then
		echo "Installing Nginx..."

		sudo add-apt-repository -y ppa:nginx/stable && sudo apt-get update

		sudo apt install -y nginx

		increase_upload_limit_nginx
	fi
}

valet_wordpress_multisite_driver() {
	echo "https://github.com/Objectivco/WordPressMultisiteSubdirectoryValetDriver"
}

increase_upload_memory_valet() {
	echo "https://github.com/laravel/valet/issues/315"
}

install_valet() {
	if [[ ! $(which -a valet) ]]
	then
		echo "Installing Valet..."

		composer global require cpriego/valet-linux:v2.2.14

		echo "export PATH=\$PATH:$(composer config --global home)/$(composer config --global bin-dir)" >> ~/.bashrc
		source ~/.bashrc

		valet install

		mkdir -p ~/.wp-cli/sites
		cd ~/.wp-cli/sites
		valet park

		valet_wordpress_multisite_driver
		increase_upload_memory_valet
	fi
}

install_wpcli() {
	if [[ ! $(which -a wp) ]]
	then
		echo "Installing WP-CLI..."

		curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

		chmod +x wp-cli.phar
		sudo mv wp-cli.phar /usr/local/bin/wp

		curl -s https://raw.githubusercontent.com/wp-cli/wp-cli/v2.4.0/utils/wp-completion.bash -o ~/.wp-completion.bash

		echo ". ~/.wp-completion.bash" >> ~/.bashrc
		source ~/.bashrc
		
		wp package install camaleaun/cli-config-command
		wp package install camaleaun/run-command
	fi
}

install_mysql() {
	if [[ ! $(which -a mysql) ]]
	then
		echo "Installing MySQL..."
		
		sudo apt install -y mysql-server
		sudo mysql -e "USE mysql;UPDATE user SET plugin='mysql_native_password' WHERE User='root';FLUSH PRIVILEGES;"
	fi
}

install_git() {
	if [[ ! $(which -a git) ]]
	then
		echo "Installing Git..."

		sudo apt install -y git
	
		sudo apt install -y git-ftp

		curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
		echo ". ~/.git-completion.bash" >> ~/.bashrc

		curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh
		echo ". ~/.git-prompt.sh" >> ~/.bashrc

		echo "export GIT_PS1_SHOWDIRTYSTATE=1" >> ~/.bashrc
		echo "export PS1='\w\$(__git_ps1 \" (%s)\")\\$ '" >> ~/.bashrc

		source ~/.bashrc

		echo 'Run'
		echo
		echo '  git config --global user.email "you@example.com"'
		echo '  git config --global user.name "Your Name"'
		echo
		echo "to set your account's default identity."
	fi
}

install_nodejs() {
	if [[ ! $(which -a node) ]]
	then
		curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
		NODE_MAJOR=20
		echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
		sudo apt update
		sudo apt install nodejs -y
	fi
}

versions() {
	curl --version
	composer --version
	nginx -v
	valet --version
	wp cli version
	mysql --version
	node -v
	git --version
}

setup() {
	print_status "Setup Development enviroment..."
	
	install_curl
	install_php
	install_composer
	install_nginx
	install_valet
	install_wpcli
	install_mysql
	install_nodejs
	install_git
	versions
}

setup
